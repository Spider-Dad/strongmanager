import logging
from aiogram import Dispatcher, types
from aiogram.dispatcher.filters import IDFilter
from bot.utils.alerts import ErrorCollector
from bot.utils.markdown import bold, escape_markdown_v2
from datetime import datetime

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –æ—à–∏–±–æ–∫
error_collector = ErrorCollector(max_errors=20)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
async def cmd_stats(message: types.Message, config):
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞
    await message.answer(
        f"üìä {bold('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞')}\n\n"
        f"–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\\."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /broadcast –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async def cmd_broadcast(message: types.Message, config):
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    await message.answer(
        f"üì£ {bold('–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞')}\n\n"
        f"–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\\."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /alerts –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞–º–∏
async def cmd_alerts(message: types.Message, config):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞–º–∏"""
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /alerts –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} ({message.from_user.username})")
    logger.info(f"–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {config.admin_ids}")
    logger.info(f"–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: {message.from_user.id in config.admin_ids}")

    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏", callback_data="alerts_errors"),
        types.InlineKeyboardButton("üîî –¢–µ—Å—Ç –∞–ª–µ—Ä—Ç–∞", callback_data="alerts_test"),
        types.InlineKeyboardButton("‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="alerts_status")
    )

    await message.answer(
        f"üö® {bold('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –∞–ª–µ—Ä—Ç–æ–≤')}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—à–∏–±–æ–∫
async def callback_alerts_errors(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏"""
    summary = error_collector.get_summary()

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
    summary_escaped = escape_markdown_v2(summary)

    await callback_query.message.edit_text(
        f"üìä {bold('–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏')}\n\n{summary_escaped}",
        reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="alerts_menu")
        )
    )
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–∞ –∞–ª–µ—Ä—Ç–æ–≤
async def callback_alerts_test(callback_query: types.CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –æ—à–∏–±–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤"""
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –æ—à–∏–±–∫—É
        logger.error("–¢–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç: –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤")

        # –¢–∞–∫–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å —Ç—Ä–µ–π—Å–±–µ–∫–æ–º
        raise ValueError("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ —Å —Ç—Ä–µ–π—Å–±–µ–∫–æ–º")
    except ValueError:
        logger.error("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ —Å —Ç—Ä–µ–π—Å–±–µ–∫–æ–º", exc_info=True)

    await callback_query.answer("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!", show_alert=True)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏", callback_data="alerts_errors"),
        types.InlineKeyboardButton("üîî –¢–µ—Å—Ç –∞–ª–µ—Ä—Ç–∞", callback_data="alerts_test"),
        types.InlineKeyboardButton("‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="alerts_status")
    )

    await callback_query.message.edit_text(
        f"üö® {bold('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –∞–ª–µ—Ä—Ç–æ–≤')}\n\n"
        f"–¢–µ—Å—Ç–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã\\. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\\.",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
async def callback_alerts_status(callback_query: types.CallbackQuery, config):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤"""
    status_text = (
        f"‚ÑπÔ∏è {bold('–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤')}\n\n"
        f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤: {'–ê–∫—Ç–∏–≤–Ω–∞' if config.admin_ids else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}\n"
        f"üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {len(config.admin_ids)}\n"
        f"üìä –û—à–∏–±–æ–∫ –≤ –±—É—Ñ–µ—Ä–µ: {len(error_collector.errors)}\n"
        f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {escape_markdown_v2(datetime.now().strftime('%Y-%m-%d %H:%M:%S'))}"
    )

    await callback_query.message.edit_text(
        status_text,
        reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="alerts_menu")
        )
    )
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –∞–ª–µ—Ä—Ç–æ–≤
async def callback_alerts_menu(callback_query: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–ª–µ—Ä—Ç–æ–≤"""
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏", callback_data="alerts_errors"),
        types.InlineKeyboardButton("üîî –¢–µ—Å—Ç –∞–ª–µ—Ä—Ç–∞", callback_data="alerts_test"),
        types.InlineKeyboardButton("‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="alerts_status")
    )

    await callback_query.message.edit_text(
        f"üö® {bold('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –∞–ª–µ—Ä—Ç–æ–≤')}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )
    await callback_query.answer()

def register_admin_handlers(dp: Dispatcher, config):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.

    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä –±–æ—Ç–∞
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
    """
    # –§–∏–ª—å—Ç—Ä –ø–æ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admin_filter = IDFilter(user_id=config.admin_ids)

    dp.register_message_handler(
        lambda msg: cmd_stats(msg, config),
        admin_filter,
        commands=["stats"],
        state="*"
    )
    dp.register_message_handler(
        lambda msg: cmd_broadcast(msg, config),
        admin_filter,
        commands=["broadcast"],
        state="*"
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /alerts
    dp.register_message_handler(
        lambda msg: cmd_alerts(msg, config),
        admin_filter,
        commands=["alerts"],
        state="*"
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
    dp.register_callback_query_handler(
        callback_alerts_errors,
        admin_filter,
        lambda c: c.data == "alerts_errors",
        state="*"
    )

    dp.register_callback_query_handler(
        callback_alerts_test,
        admin_filter,
        lambda c: c.data == "alerts_test",
        state="*"
    )

    dp.register_callback_query_handler(
        lambda c: callback_alerts_status(c, config),
        admin_filter,
        lambda c: c.data == "alerts_status",
        state="*"
    )

    dp.register_callback_query_handler(
        callback_alerts_menu,
        admin_filter,
        lambda c: c.data == "alerts_menu",
        state="*"
    )
