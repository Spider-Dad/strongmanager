import logging
from aiogram import Dispatcher, types
from aiogram.dispatcher.filters import IDFilter
from bot.utils.alerts import ErrorCollector
from bot.utils.markdown import bold, escape_markdown_v2
from datetime import datetime, timedelta
from bot.services.sync_service import SyncService
from sqlalchemy import select, func
import bot.services.database as db

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –æ—à–∏–±–æ–∫
error_collector = ErrorCollector(max_errors=20)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
sync_service = None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /alerts –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞–º–∏
async def cmd_alerts(message: types.Message, config):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞–º–∏"""
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /alerts –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} ({message.from_user.username})")
    logger.info(f"–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {config.admin_ids}")
    logger.info(f"–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: {message.from_user.id in config.admin_ids}")

    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton("üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏", callback_data="alerts_errors"),
        types.InlineKeyboardButton("‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="alerts_status"),
    )

    await message.answer(
        f"üö® {bold('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –∞–ª–µ—Ä—Ç–æ–≤')}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode='MarkdownV2'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—à–∏–±–æ–∫ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞, —Ç–æ–ª—å–∫–æ ERROR, –º–∞–∫—Å–∏–º—É–º 3)
async def callback_alerts_errors(callback_query: types.CallbackQuery):
    cutoff = datetime.now() - timedelta(days=1)

    async with db.async_session() as session:
        result = await session.execute(
            select(db.ErrorLog)
            .where(
                db.ErrorLog.level.in_(["ERROR", "CRITICAL"]),
                db.ErrorLog.timestamp >= cutoff,
            )
            .order_by(db.ErrorLog.timestamp.desc())
            .limit(3)
        )
        errors = result.scalars().all()

    if not errors:
        body = (
            "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ –±–æ—Ç–∞ —Å —Ç–∏–ø–æ–º ERROR, CRITICAL\n\n"
            "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏ –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã –æ—à–∏–±–∫–∏"
        )
    else:
        lines = [
            "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ –±–æ—Ç–∞ —Å —Ç–∏–ø–æ–º ERROR, CRITICAL",
            "",
        ]
        for err in errors:
            ts = err.timestamp.strftime('%Y-%m-%d %H:%M:%S') if err.timestamp else ""
            module = (err.module or err.logger_name or "unknown")
            level = (err.level or "").upper()
            message = (err.message or "")[:500]
            lines.append(f"{level} {ts} ‚Äî {module}")
            lines.append(f"{message}")
            lines.append("")
        body = "\n".join(lines).rstrip()

    await callback_alerts_menu_render(
        callback_query,
        title=f"üìä {bold('–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏')}\n\n",
        body=body,
    )

# –£–¥–∞–ª—ë–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ—Å—Ç–∞ –∞–ª–µ—Ä—Ç–æ–≤ ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ—Ç–∫–ª—é—á–µ–Ω–∞

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
async def callback_alerts_status(callback_query: types.CallbackQuery, config):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—à–∏–±–∫–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏ (CRITICAL, ERROR, WARNING) –ø–æ –º–æ–¥—É–ª—è–º"""
    cutoff = datetime.now() - timedelta(days=1)

    async with db.async_session() as session:
        result = await session.execute(
            select(
                db.ErrorLog.module,
                db.ErrorLog.level,
                func.count().label("cnt"),
            )
            .where(
                db.ErrorLog.timestamp >= cutoff,
                db.ErrorLog.level.in_(["CRITICAL", "ERROR", "WARNING"]),
            )
            .group_by(db.ErrorLog.module, db.ErrorLog.level)
        )
        rows = result.all()

    if not rows:
        body = (
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –ø–æ —Ç–∏–ø–∞–º –≤ –º–æ–¥—É–ª—è—Ö:\n\n"
            "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏ –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã –æ—à–∏–±–∫–∏ —Å —Ç–∏–ø–æ–º CRITICAL, ERROR, WARNING"
        )
    else:
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: –º–æ–¥—É–ª—å -> {level: count}
        stats = {}
        for module, level, cnt in rows:
            key = module or "unknown"
            if key not in stats:
                stats[key] = {"CRITICAL": 0, "ERROR": 0, "WARNING": 0}
            stats[key][level] = cnt

        lines = [
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –ø–æ —Ç–∏–ø–∞–º –≤ –º–æ–¥—É–ª—è—Ö:",
            "",
        ]
        for module, level_counts in sorted(stats.items()):
            lines.append(f"{module}:")
            lines.append(
                f"CRITICAL: {level_counts['CRITICAL']}, ERROR: {level_counts['ERROR']}, WARNING: {level_counts['WARNING']}"
            )
            lines.append("")
        body = "\n".join(lines).rstrip()

    await callback_alerts_menu_render(
        callback_query,
        title=f"‚ÑπÔ∏è {bold('–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏')}\n\n",
        body=body,
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –∞–ª–µ—Ä—Ç–æ–≤
async def callback_alerts_menu(callback_query: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–ª–µ—Ä—Ç–æ–≤"""
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton("üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏", callback_data="alerts_errors"),
        types.InlineKeyboardButton("‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="alerts_status")
    )

    await callback_query.message.edit_text(
        f"üö® {bold('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –∞–ª–µ—Ä—Ç–æ–≤')}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode='MarkdownV2'
    )
    await callback_query.answer()

async def callback_alerts_menu_render(callback_query: types.CallbackQuery, title: str, body: str):
    keyboard = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="alerts_menu")
    )
    await callback_query.message.edit_text(
        f"{title}{escape_markdown_v2(body)}",
        reply_markup=keyboard,
        parse_mode='MarkdownV2'
    )
    await callback_query.answer()

# –£–¥–∞–ª—ë–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Google Script ‚Äî –≤–Ω–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sync –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –ë–î
async def cmd_sync(message: types.Message, config):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –ë–î"""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /sync –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} ({message.from_user.username})")

    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data="sync_now"),
        types.InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏", callback_data="sync_status"),
        types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="sync_settings")
    )

    await message.answer(
        f"üóÑÔ∏è {bold('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –ë–î')}\n\n"
        f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets –≤ SQLite\\.\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode='MarkdownV2'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
async def callback_sync_now(callback_query: types.CallbackQuery):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ë–î"""
    global sync_service

    if sync_service.is_syncing:
        await callback_query.answer("‚è≥ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è!", show_alert=True)
        return

    await callback_query.answer("üîÑ –ó–∞–ø—É—Å–∫–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback_query.message.edit_text(
        f"üîÑ {bold('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞')}\n\n"
        f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ\\.\\.\\.\n"
        f"–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç\\.",
        parse_mode='MarkdownV2'
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    result = await sync_service.sync_database()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    if result['success']:
        records_text = "\n".join([
            f"‚Ä¢ {table}: {count} –∑–∞–ø–∏—Å–µ–π"
            for table, count in result['records_synced'].items()
        ])

        message_text = (
            f"‚úÖ {bold('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ')}\n\n"
            f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result['duration']} —Å–µ–∫\\.\n\n"
            f"{bold('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:')}\n{escape_markdown_v2(records_text)}"
        )
    else:
        message_text = (
            f"‚ùå {bold('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏')}\n\n"
            f"{escape_markdown_v2(result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))}\n"
            f"–°–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
        )

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    keyboard = types.InlineKeyboardMarkup(row_width=1).add(
        types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="sync_menu")
    )

    await callback_query.message.edit_text(
        message_text,
        reply_markup=keyboard,
        parse_mode='MarkdownV2'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
async def callback_sync_status(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    global sync_service

    status = await sync_service.get_sync_status()

    if status.get('error'):
        message_text = (
            f"‚ùå {bold('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞')}\n\n"
            f"{escape_markdown_v2(status['error'])}"
        )
    elif status['status'] == 'never':
        message_text = (
            f"‚ÑπÔ∏è {bold('–°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏')}\n\n"
            f"üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å\n"
            f"üîÑ –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {'–í–∫–ª—é—á–µ–Ω–∞' if status['auto_sync_enabled'] else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}"
        )
    else:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        last_sync_date = status['last_sync_date']
        if isinstance(last_sync_date, str):
            try:
                last_sync_date = datetime.fromisoformat(last_sync_date.replace('Z', '+00:00'))
            except:
                pass

        date_str = last_sync_date.strftime('%d\\.%m\\.%Y %H:%M:%S') if isinstance(last_sync_date, datetime) else str(last_sync_date)

        message_text = (
            f"‚ÑπÔ∏è {bold('–°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏')}\n\n"
            f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {date_str}\n"
            f"{'‚úÖ' if status['status'] == 'success' else '‚ùå'} –°—Ç–∞—Ç—É—Å: {status['status']}\n"
        )

        if status['duration_seconds']:
            message_text += f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {status['duration_seconds']} —Å–µ–∫\\.\n"

        if status.get('records_synced'):
            records_text = "\n".join([
                f"  ‚Ä¢ {table}: {count}"
                for table, count in status['records_synced'].items()
            ])
            message_text += f"\n{bold('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π:')}\n{escape_markdown_v2(records_text)}\n"

        if status.get('error_message'):
            message_text += f"\n‚ùå –û—à–∏–±–∫–∞: {escape_markdown_v2(status['error_message'])}\n"

        message_text += f"\nüîÑ –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {'–í–∫–ª—é—á–µ–Ω–∞' if status['auto_sync_enabled'] else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}"
        if status['auto_sync_enabled']:
            try:
                next_time = None
                if isinstance(last_sync_date, datetime):
                    next_time = last_sync_date + timedelta(minutes=status['sync_interval_minutes'])
                if next_time:
                    next_time_str = next_time.strftime('%d\\.%m\\.%Y %H:%M:%S')
                    message_text += f"\nüìÖ –°–ª–µ–¥—É—é—â–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {next_time_str}"
            except Exception:
                pass

        if status['is_syncing']:
            message_text += f"\n\n‚è≥ {bold('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–µ–π—á–∞—Å!')}"

    await callback_query.message.edit_text(
        message_text,
        reply_markup=types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="sync_menu")
        ),
        parse_mode='MarkdownV2'
    )
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
async def callback_sync_settings(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    global sync_service

    status = await sync_service.get_sync_status()

    message_text = (
        f"‚öôÔ∏è {bold('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏')}\n\n"
        f"üîÑ –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {'–í–∫–ª—é—á–µ–Ω–∞' if status['auto_sync_enabled'] else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}\n"
    )

    if status['auto_sync_enabled']:
        message_text += f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ {status['sync_interval_minutes']} –º–∏–Ω—É—Ç\n"

    message_text += (
        f"\n{bold('–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:')}\n"
        f"‚Ä¢ SYNC\\_INTERVAL\\_MINUTES \\- –∏–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö\n"
        f"  \\(0 \\= –æ—Ç–∫–ª—é—á–µ–Ω–∞\\)\n\n"
        f"‚ÑπÔ∏è –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –ø–µ—Ä—É–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ\\."
    )

    await callback_query.message.edit_text(
        message_text,
        reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="sync_menu")
        )
    )
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
async def callback_sync_menu(callback_query: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data="sync_now"),
        types.InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏", callback_data="sync_status"),
        types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="sync_settings")
    )

    await callback_query.message.edit_text(
        f"üóÑÔ∏è {bold('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –ë–î')}\n\n"
        f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets –≤ SQLite\\.\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode='MarkdownV2'
    )
    await callback_query.answer()

def register_admin_handlers(dp: Dispatcher, config):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.

    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä –±–æ—Ç–∞
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
    """
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    global sync_service
    sync_service = SyncService(config)

    # –§–∏–ª—å—Ç—Ä –ø–æ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admin_filter = IDFilter(user_id=config.admin_ids)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /alerts
    dp.register_message_handler(
        lambda msg: cmd_alerts(msg, config),
        admin_filter,
        commands=["alerts"],
        state="*"
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /sync
    dp.register_message_handler(
        lambda msg: cmd_sync(msg, config),
        admin_filter,
        commands=["sync"],
        state="*"
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
    dp.register_callback_query_handler(
        callback_alerts_errors,
        admin_filter,
        lambda c: c.data == "alerts_errors",
        state="*"
    )

    dp.register_callback_query_handler(
        lambda c: callback_alerts_status(c, config),
        admin_filter,
        lambda c: c.data == "alerts_status",
        state="*"
    )

    dp.register_callback_query_handler(
        callback_alerts_menu,
        admin_filter,
        lambda c: c.data == "alerts_menu",
        state="*"
    )


    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    dp.register_callback_query_handler(
        callback_sync_now,
        admin_filter,
        lambda c: c.data == "sync_now",
        state="*"
    )

    dp.register_callback_query_handler(
        callback_sync_status,
        admin_filter,
        lambda c: c.data == "sync_status",
        state="*"
    )

    dp.register_callback_query_handler(
        callback_sync_settings,
        admin_filter,
        lambda c: c.data == "sync_settings",
        state="*"
    )

    dp.register_callback_query_handler(
        callback_sync_menu,
        admin_filter,
        lambda c: c.data == "sync_menu",
        state="*"
    )
