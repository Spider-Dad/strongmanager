import logging
import asyncio
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List
from aiogram import Bot
from aiogram.utils.exceptions import TelegramAPIError
import traceback


class AlertHandler(logging.Handler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤ –≤ Telegram"""

    def __init__(self, bot: Bot, admin_ids: List[int], alert_interval: int = 300, error_collector=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤

        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            admin_ids: –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤
            alert_interval: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∞–ª–µ—Ä—Ç–∞–º–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
            error_collector: –ö–æ–ª–ª–µ–∫—Ç–æ—Ä –æ—à–∏–±–æ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
        """
        super().__init__()
        self.bot = bot
        self.admin_ids = admin_ids
        self.alert_interval = alert_interval
        self.last_alerts: Dict[str, datetime] = {}
        self.alert_queue = asyncio.Queue()
        self.worker_task: Optional[asyncio.Task] = None
        self.error_collector = error_collector

    def start(self):
        """–ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
        if not self.worker_task or self.worker_task.done():
            self.worker_task = asyncio.create_task(self._alert_worker())

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞"""
        if self.worker_task and not self.worker_task.done():
            self.worker_task.cancel()

    async def _alert_worker(self):
        """–í–æ—Ä–∫–µ—Ä –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
        while True:
            try:
                alert_data = await self.alert_queue.get()
                await self._send_alert(**alert_data)
            except asyncio.CancelledError:
                break
            except Exception as e:
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞, –Ω–æ –Ω–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–ª–µ—Ä—Ç
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–ª–µ—Ä—Ç–∞: {e}")

    def emit(self, record: logging.LogRecord):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞"""
        if record.levelno >= logging.ERROR:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —á–∞—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç—ã –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞
            error_key = f"{record.name}:{record.msg[:100]}"
            now = datetime.now()

            if error_key in self.last_alerts:
                if now - self.last_alerts[error_key] < timedelta(seconds=self.alert_interval):
                    return

            self.last_alerts[error_key] = now

            # –î–æ–±–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç –≤ –æ—á–µ—Ä–µ–¥—å
            alert_data = {
                'level': record.levelname,
                'logger_name': record.name,
                'message': record.getMessage(),
                'timestamp': datetime.fromtimestamp(record.created),
                'traceback': self.format(record) if record.exc_info else None
            }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if self.error_collector:
                self.error_collector.add_error(alert_data)

            try:
                self.alert_queue.put_nowait(alert_data)
            except asyncio.QueueFull:
                # –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–ª–µ—Ä—Ç
                pass

    async def _send_alert(self, level: str, logger_name: str, message: str,
                         timestamp: datetime, traceback: Optional[str] = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        alert_text = f"""
üö® *–ê–õ–ï–†–¢: {level}*

üìÖ *–í—Ä–µ–º—è:* {timestamp.strftime('%Y-%m-%d %H:%M:%S')}
üìç *–ú–æ–¥—É–ª—å:* `{logger_name}`

üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ:*
```
{message[:1000]}
```
"""

        if traceback:
            alert_text += f"\nüìã *Traceback:*\n```\n{traceback[:2000]}\n```"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin_id in self.admin_ids:
            try:
                await self.bot.send_message(
                    admin_id,
                    alert_text,
                    parse_mode="Markdown",
                    disable_notification=False
                )
            except TelegramAPIError as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")


class ErrorCollector:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –æ—à–∏–±–æ–∫"""

    def __init__(self, max_errors: int = 10):
        self.errors = []
        self.max_errors = max_errors

    def add_error(self, error_data: Dict[str, Any]):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä"""
        self.errors.append(error_data)
        if len(self.errors) > self.max_errors:
            self.errors.pop(0)

    def get_summary(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –æ—à–∏–±–∫–∞–º"""
        if not self.errors:
            return "–û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"

        summary = f"–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {len(self.errors)}\n\n"

        for i, error in enumerate(self.errors[-5:], 1):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—à–∏–±–æ–∫
            summary += f"{i}. [{error['timestamp']}] {error['level']} - {error['message'][:100]}...\n"

        return summary


def setup_alert_handler(bot: Bot, admin_ids: List[int], logger: Optional[logging.Logger] = None) -> AlertHandler:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –ª–æ–≥–≥–µ—Ä–∞

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        admin_ids: –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        logger: –õ–æ–≥–≥–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ—Ä–Ω–µ–≤–æ–π)

    Returns:
        AlertHandler: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–ª–µ—Ä—Ç–æ–≤
    """
    if not logger:
        logger = logging.getLogger()

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º error_collector –∏–∑ admin.py
    try:
        from bot.handlers.admin import error_collector
    except ImportError:
        error_collector = None

    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–ª–µ—Ä—Ç–æ–≤
    alert_handler = AlertHandler(bot, admin_ids, error_collector=error_collector)
    alert_handler.setLevel(logging.ERROR)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
    formatter = logging.Formatter(
        "%(asctime)s - %(name)s - %(levelname)s - %(message)s\n%(exc_info)s"
    )
    alert_handler.setFormatter(formatter)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –ª–æ–≥–≥–µ—Ä—É
    logger.addHandler(alert_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä
    alert_handler.start()

    return alert_handler