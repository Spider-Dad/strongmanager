"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å MarkdownV2 —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ Telegram.
"""

import re
from typing import Optional


def escape_markdown_v2(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2.

    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç

    Returns:
        –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    # –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ MarkdownV2
    special_chars = r'_*[]()~`>#+-=|{}.!'

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
    for char in special_chars:
        text = text.replace(char, f'\\{char}')

    return text


def bold(text: str) -> str:
    """
    –î–µ–ª–∞–µ—Ç —Ç–µ–∫—Å—Ç –∂–∏—Ä–Ω—ã–º –≤ MarkdownV2.

    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    return f'*{escape_markdown_v2(text)}*'


def italic(text: str) -> str:
    """
    –î–µ–ª–∞–µ—Ç —Ç–µ–∫—Å—Ç –∫—É—Ä—Å–∏–≤–æ–º –≤ MarkdownV2.

    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    return f'_{escape_markdown_v2(text)}_'


def code(text: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∫–∞–∫ –∫–æ–¥ –≤ MarkdownV2.

    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    return f'`{text}`'


def code_block(text: str, language: Optional[str] = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∫–∞–∫ –±–ª–æ–∫ –∫–æ–¥–∞ –≤ MarkdownV2.

    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        language: –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if language:
        return f'```{language}\n{text}\n```'
    return f'```\n{text}\n```'


def link(text: str, url: str) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –≤ MarkdownV2.

    Args:
        text: –¢–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏
        url: URL —Å—Å—ã–ª–∫–∏

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞
    """
    return f'[{escape_markdown_v2(text)}]({url})'


def hidden_link(url: str) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä—ã—Ç—É—é —Å—Å—ã–ª–∫—É –≤ MarkdownV2.

    Args:
        url: URL —Å—Å—ã–ª–∫–∏

    Returns:
        –°–∫—Ä—ã—Ç–∞—è —Å—Å—ã–ª–∫–∞
    """
    return f'[‚Äã]({url})'


def strikethrough(text: str) -> str:
    """
    –ó–∞—á–µ—Ä–∫–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤ MarkdownV2.

    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    return f'~{escape_markdown_v2(text)}~'


def underline(text: str) -> str:
    """
    –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤ MarkdownV2.

    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    return f'__{escape_markdown_v2(text)}__'


def spoiler(text: str) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–ø–æ–π–ª–µ—Ä –≤ MarkdownV2.

    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–æ–π–ª–µ—Ä
    """
    return f'||{escape_markdown_v2(text)}||'


def format_notification(title: str, message: str, url: Optional[str] = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º MarkdownV2.

    Args:
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        url: –°—Å—ã–ª–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    """
    formatted_text = f"{bold(title)}\n\n{escape_markdown_v2(message)}"

    if url:
        formatted_text += f"\n\n{link('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞–Ω–∏—é', url)}"

    return formatted_text


def format_student_action(student_name: str, action: str, task_name: str, url: Optional[str] = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–µ–π—Å—Ç–≤–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞.

    Args:
        student_name: –ò–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞
        action: –î–µ–π—Å—Ç–≤–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–≤–µ—Ç", "–æ—Å—Ç–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
        task_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        url: –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    """
    text = f"üë§ –°—Ç—É–¥–µ–Ω—Ç {bold(student_name)} {escape_markdown_v2(action)}\n"
    text += f"üìù –ó–∞–¥–∞–Ω–∏–µ: {italic(task_name)}"

    if url:
        text += f"\n\n{link('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞–Ω–∏–µ', url)}"

    return text